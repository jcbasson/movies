{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/jcbasson/Projects/Movies/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/Movies/client/src/components/movies/Movies.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query movies($title: String, $page: Int) {\\n    movies(title: $title, page: $page) {\\n      Search {\\n        ...Movie\\n      }\\n      totalResults\\n      Response\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"./fragments\";\nimport { makeMovieTitlePageSelector } from \"./selectors\";\nimport { Layout, LeftColumn, RightColumn } from \"./styled\";\nexport const GET_MOVIES_QUERY = gql(_templateObject(), movieFragment.movie);\n\nconst Movies = () => {\n  const movieTitlePageSelector = React.useMemo(makeMovieTitlePageSelector, []);\n\n  const _useSelector = useSelector(state => movieTitlePageSelector(state)),\n        title = _useSelector.title,\n        page = _useSelector.page;\n\n  const _useQuery = useQuery(GET_MOVIES_QUERY, {\n    variables: {\n      title,\n      page\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data; //TODO: Implement proper placeholder to display while waiting for data\n\n\n  if (loading) return null; //TODO: Implement proper error component\n\n  if (error) return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Error!\");\n  console.log(\"data = \", data);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(LeftColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \" \", React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Howzit\")), React.createElement(RightColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/home/jcbasson/Projects/Movies/client/src/components/movies/Movies.tsx"],"names":["React","gql","useSelector","useQuery","movieFragment","makeMovieTitlePageSelector","Layout","LeftColumn","RightColumn","GET_MOVIES_QUERY","movie","Movies","movieTitlePageSelector","useMemo","state","title","page","variables","loading","error","data","console","log"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,0BAAT,QAA2C,aAA3C;AAEA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,QAAgD,UAAhD;AAEA,OAAO,MAAMC,gBAAgB,GAAGR,GAAH,oBAUzBG,aAAa,CAACM,KAVW,CAAtB;;AAeP,MAAMC,MAAyB,GAAG,MAAM;AACtC,QAAMC,sBAAsB,GAAGZ,KAAK,CAACa,OAAN,CAAcR,0BAAd,EAA0C,EAA1C,CAA/B;;AADsC,uBAEdH,WAAW,CAAEY,KAAD,IAClCF,sBAAsB,CAACE,KAAD,CADW,CAFG;AAAA,QAE9BC,KAF8B,gBAE9BA,KAF8B;AAAA,QAEvBC,IAFuB,gBAEvBA,IAFuB;;AAAA,oBAMLb,QAAQ,CAACM,gBAAD,EAAmB;AAC1DQ,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAD+C,GAAnB,CANH;AAAA,QAM9BE,OAN8B,aAM9BA,OAN8B;AAAA,QAMrBC,KANqB,aAMrBA,KANqB;AAAA,QAMdC,IANc,aAMdA,IANc,EAUtC;;;AACA,MAAIF,OAAJ,EAAa,OAAO,IAAP,CAXyB,CAYtC;;AACA,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAEXE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AAEA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CADF,EAKE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CA1BD;;AA4BA,eAAeT,MAAf","sourcesContent":["import * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"./fragments\";\nimport { makeMovieTitlePageSelector } from \"./selectors\";\nimport { IState } from \"./types\";\nimport { Layout, LeftColumn, RightColumn } from \"./styled\";\n\nexport const GET_MOVIES_QUERY = gql`\n  query movies($title: String, $page: Int) {\n    movies(title: $title, page: $page) {\n      Search {\n        ...Movie\n      }\n      totalResults\n      Response\n    }\n  }\n  ${movieFragment.movie}\n`;\n\ninterface IMovies {}\n\nconst Movies: React.FC<IMovies> = () => {\n  const movieTitlePageSelector = React.useMemo(makeMovieTitlePageSelector, []);\n  const { title, page } = useSelector((state: IState) =>\n    movieTitlePageSelector(state)\n  );\n\n  const { loading, error, data } = useQuery(GET_MOVIES_QUERY, {\n    variables: { title, page }\n  });\n\n  //TODO: Implement proper placeholder to display while waiting for data\n  if (loading) return null;\n  //TODO: Implement proper error component\n  if (error) return <h2>Error!</h2>;\n\n  console.log(\"data = \", data);\n\n  return (\n    <Layout>\n      <LeftColumn>\n        {\" \"}\n        <h1>Howzit</h1>\n      </LeftColumn>\n      <RightColumn></RightColumn>\n    </Layout>\n  );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}