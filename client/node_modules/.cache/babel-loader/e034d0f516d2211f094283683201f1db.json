{"ast":null,"code":"var _jsxFileName = \"/home/jcbasson/Projects/Movies/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Root from \"./root\";\nimport { Provider } from \"react-redux\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport store from \"./store\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  onError: errors => {\n    /*TODO: Do logging of different error types*/\n    console.log(errors);\n  },\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.imdbID\n  })\n});\n\nconst MoviesApp = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Root, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(MoviesApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/jcbasson/Projects/Movies/client/src/index.js"],"names":["React","ReactDOM","ApolloClient","ApolloProvider","Root","Provider","InMemoryCache","store","client","uri","onError","errors","console","log","cache","dataIdFromObject","object","imdbID","MoviesApp","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,MAAM,GAAG,IAAIN,YAAJ,CAAiB;AAC9BO,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,OAAO,EAAEC,MAAM,IAAI;AACjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,GAL6B;AAM9BG,EAAAA,KAAK,EAAE,IAAIR,aAAJ,CAAkB;AACvBS,IAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC;AADZ,GAAlB;AANuB,CAAjB,CAAf;;AAWA,MAAMC,SAAS,GAAG,MAAM;AACtB,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEV,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CARD;;AASAN,QAAQ,CAACkB,MAAT,CAAgB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA+BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA/B","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Root from \"./root\";\nimport { Provider } from \"react-redux\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport store from \"./store\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  onError: errors => {\n    /*TODO: Do logging of different error types*/\n    console.log(errors);\n  },\n  cache: new InMemoryCache({\n    dataIdFromObject: object => object.imdbID\n  })\n});\n\nconst MoviesApp = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <Root />\n      </Provider>\n    </ApolloProvider>\n  );\n};\nReactDOM.render(<MoviesApp />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}