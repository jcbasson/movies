{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/jcbasson/Projects/Movies/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/Movies/client/src/components/movies/Movies.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query movies($title: String, $page: Int) {\\n    movies(title: $title, page: $page) {\\n      Search {\\n        ...Movie\\n      }\\n      totalResults\\n      Response\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"./fragments\";\nimport { makeMovieTitlePageSelector } from \"./selectors\";\nimport { Layout, LeftColumn, RightColumn } from \"./styled\";\nimport MoviesList from \"./components/movieList\";\nimport MovieSearchBar from \"./components/movieSearchBar\";\nexport const GET_MOVIES_QUERY = gql(_templateObject(), movieFragment.movie);\n\nconst Movies = ({\n  defaultMovieTitle,\n  defaultPage\n}) => {\n  const movieTitlePageSelector = React.useMemo(makeMovieTitlePageSelector, []);\n\n  const _useSelector = useSelector(state => movieTitlePageSelector(state)),\n        title = _useSelector.title,\n        page = _useSelector.page;\n\n  const _useQuery = useQuery(GET_MOVIES_QUERY, {\n    variables: {\n      title: isEmpty(title) ? defaultMovieTitle : title,\n      page: isEmpty(page) ? defaultPage : page\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data; //TODO: Implement proper placeholder to display while waiting for data\n\n\n  if (loading) return null; //TODO: Implement proper error component\n\n  if (error) return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Error!\");\n  const movies = get(data, \"movies.Search\", []);\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(LeftColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(MovieSearchBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(MoviesList, {\n    movies: movies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(RightColumn, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n};\n\nexport default Movies;","map":{"version":3,"sources":["/home/jcbasson/Projects/Movies/client/src/components/movies/Movies.tsx"],"names":["React","gql","get","isEmpty","useSelector","useQuery","movieFragment","makeMovieTitlePageSelector","Layout","LeftColumn","RightColumn","MoviesList","MovieSearchBar","GET_MOVIES_QUERY","movie","Movies","defaultMovieTitle","defaultPage","movieTitlePageSelector","useMemo","state","title","page","variables","loading","error","data","movies"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,0BAAT,QAA2C,aAA3C;AAEA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,QAAgD,UAAhD;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,OAAO,MAAMC,gBAAgB,GAAGZ,GAAH,oBAUzBK,aAAa,CAACQ,KAVW,CAAtB;;AAkBP,MAAMC,MAAyB,GAAG,CAAC;AAAEC,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,CAAD,KAAwC;AACxE,QAAMC,sBAAsB,GAAGlB,KAAK,CAACmB,OAAN,CAAcZ,0BAAd,EAA0C,EAA1C,CAA/B;;AADwE,uBAEhDH,WAAW,CAAEgB,KAAD,IAClCF,sBAAsB,CAACE,KAAD,CADW,CAFqC;AAAA,QAEhEC,KAFgE,gBAEhEA,KAFgE;AAAA,QAEzDC,IAFyD,gBAEzDA,IAFyD;;AAAA,oBAMvCjB,QAAQ,CAACQ,gBAAD,EAAmB;AAC1DU,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAElB,OAAO,CAACkB,KAAD,CAAP,GAAiBL,iBAAjB,GAAqCK,KADnC;AAETC,MAAAA,IAAI,EAAEnB,OAAO,CAACmB,IAAD,CAAP,GAAgBL,WAAhB,GAA8BK;AAF3B;AAD+C,GAAnB,CAN+B;AAAA,QAMhEE,OANgE,aAMhEA,OANgE;AAAA,QAMvDC,KANuD,aAMvDA,KANuD;AAAA,QAMhDC,IANgD,aAMhDA,IANgD,EAaxE;;;AACA,MAAIF,OAAJ,EAAa,OAAO,IAAP,CAd2D,CAexE;;AACA,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAEX,QAAME,MAAM,GAAGzB,GAAG,CAACwB,IAAD,EAAO,eAAP,EAAwB,EAAxB,CAAlB;AAEA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,UAAD;AAAY,IAAA,MAAM,EAAEC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAKE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AASD,CA7BD;;AA+BA,eAAeZ,MAAf","sourcesContent":["import * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { useSelector } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"./fragments\";\nimport { makeMovieTitlePageSelector } from \"./selectors\";\nimport { IState } from \"./types\";\nimport { Layout, LeftColumn, RightColumn } from \"./styled\";\nimport MoviesList from \"./components/movieList\";\nimport MovieSearchBar from \"./components/movieSearchBar\";\n\nexport const GET_MOVIES_QUERY = gql`\n  query movies($title: String, $page: Int) {\n    movies(title: $title, page: $page) {\n      Search {\n        ...Movie\n      }\n      totalResults\n      Response\n    }\n  }\n  ${movieFragment.movie}\n`;\n\ninterface IMovies {\n  defaultMovieTitle?: string;\n  defaultPage?: number;\n}\n\nconst Movies: React.FC<IMovies> = ({ defaultMovieTitle, defaultPage }) => {\n  const movieTitlePageSelector = React.useMemo(makeMovieTitlePageSelector, []);\n  const { title, page } = useSelector((state: IState) =>\n    movieTitlePageSelector(state)\n  );\n\n  const { loading, error, data } = useQuery(GET_MOVIES_QUERY, {\n    variables: {\n      title: isEmpty(title) ? defaultMovieTitle : title,\n      page: isEmpty(page) ? defaultPage : page\n    }\n  });\n\n  //TODO: Implement proper placeholder to display while waiting for data\n  if (loading) return null;\n  //TODO: Implement proper error component\n  if (error) return <h2>Error!</h2>;\n\n  const movies = get(data, \"movies.Search\", []);\n\n  return (\n    <Layout>\n      <LeftColumn>\n        <MovieSearchBar></MovieSearchBar>\n        <MoviesList movies={movies} />\n      </LeftColumn>\n      <RightColumn></RightColumn>\n    </Layout>\n  );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}