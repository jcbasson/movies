{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/jcbasson/Projects/Movies/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/jcbasson/Projects/Movies/client/src/components/movies/components/movieList/MovieList.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query movies($title: String, $page: Int) {\\n    movies(title: $title, page: $page) {\\n      Search {\\n        ...Movie\\n      }\\n      totalResults\\n      Response\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport uniqBy from \"lodash/uniqBy\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"../../fragments\";\nimport { Layout } from \"./styled\";\nimport MovieItem from \"../movieItem\";\nimport { makeMovieTitlePageSelector } from \"../../selectors\";\nimport { setMovieTotalResults } from \"../../actions\";\nexport const GET_MOVIES_QUERY = gql(_templateObject(), movieFragment.movie);\n\nconst MovieList = ({\n  defaultMovieTitle,\n  defaultPage\n}) => {\n  const dispatch = useDispatch();\n  const movieTitlePageSelector = makeMovieTitlePageSelector();\n\n  const _useSelector = useSelector(state => movieTitlePageSelector(state)),\n        title = _useSelector.title,\n        page = _useSelector.page;\n\n  const _useQuery = useQuery(GET_MOVIES_QUERY, {\n    variables: {\n      title: isEmpty(title) ? defaultMovieTitle : title,\n      page: isEmpty(page) ? defaultPage : page\n    }\n  }),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  const movies = get(data, \"movies.Search\", []);\n  if (loading || error || isEmpty(movies)) return null; // @ts-ignore\n\n  const duplicateFreeMovies = uniqBy(movies, \"imdbID\");\n  dispatch(setMovieTotalResults(Number(get(data, \"movies.totalResults\", 0))));\n  return React.createElement(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, duplicateFreeMovies.map(movie => React.createElement(MovieItem, {\n    imdbID: get(movie, \"imdbID\", \"\"),\n    title: get(movie, \"Title\", \"\"),\n    year: get(movie, \"Year\", \"\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n};\n\nexport default MovieList;","map":{"version":3,"sources":["/home/jcbasson/Projects/Movies/client/src/components/movies/components/movieList/MovieList.tsx"],"names":["React","gql","get","isEmpty","uniqBy","useSelector","useDispatch","useQuery","movieFragment","Layout","MovieItem","makeMovieTitlePageSelector","setMovieTotalResults","GET_MOVIES_QUERY","movie","MovieList","defaultMovieTitle","defaultPage","dispatch","movieTitlePageSelector","state","title","page","variables","loading","error","data","movies","duplicateFreeMovies","Number","map"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,0BAAT,QAA2C,iBAA3C;AAEA,SAASC,oBAAT,QAAqC,eAArC;AAEA,OAAO,MAAMC,gBAAgB,GAAGZ,GAAH,oBAUzBO,aAAa,CAACM,KAVW,CAAtB;;AAkBP,MAAMC,SAA+B,GAAG,CAAC;AACvCC,EAAAA,iBADuC;AAEvCC,EAAAA;AAFuC,CAAD,KAGlC;AACJ,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,sBAAsB,GAAGR,0BAA0B,EAAzD;;AAFI,uBAGoBN,WAAW,CAAEe,KAAD,IAClCD,sBAAsB,CAACC,KAAD,CADW,CAH/B;AAAA,QAGIC,KAHJ,gBAGIA,KAHJ;AAAA,QAGWC,IAHX,gBAGWA,IAHX;;AAAA,oBAM6Bf,QAAQ,CAACM,gBAAD,EAAmB;AAC1DU,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAElB,OAAO,CAACkB,KAAD,CAAP,GAAiBL,iBAAjB,GAAqCK,KADnC;AAETC,MAAAA,IAAI,EAAEnB,OAAO,CAACmB,IAAD,CAAP,GAAgBL,WAAhB,GAA8BK;AAF3B;AAD+C,GAAnB,CANrC;AAAA,QAMIE,OANJ,aAMIA,OANJ;AAAA,QAMaC,KANb,aAMaA,KANb;AAAA,QAMoBC,IANpB,aAMoBA,IANpB;;AAYJ,QAAMC,MAAM,GAAGzB,GAAG,CAACwB,IAAD,EAAO,eAAP,EAAwB,EAAxB,CAAlB;AAEA,MAAIF,OAAO,IAAIC,KAAX,IAAoBtB,OAAO,CAACwB,MAAD,CAA/B,EAAyC,OAAO,IAAP,CAdrC,CAgBJ;;AACA,QAAMC,mBAAmB,GAAGxB,MAAM,CAACuB,MAAD,EAAS,QAAT,CAAlC;AAEAT,EAAAA,QAAQ,CAACN,oBAAoB,CAACiB,MAAM,CAAC3B,GAAG,CAACwB,IAAD,EAAO,qBAAP,EAA8B,CAA9B,CAAJ,CAAP,CAArB,CAAR;AAEA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,mBAAmB,CAACE,GAApB,CAAyBhB,KAAD,IACvB,oBAAC,SAAD;AACE,IAAA,MAAM,EAAEZ,GAAG,CAACY,KAAD,EAAQ,QAAR,EAAkB,EAAlB,CADb;AAEE,IAAA,KAAK,EAAEZ,GAAG,CAACY,KAAD,EAAQ,OAAR,EAAiB,EAAjB,CAFZ;AAGE,IAAA,IAAI,EAAEZ,GAAG,CAACY,KAAD,EAAQ,MAAR,EAAgB,EAAhB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF;AAWD,CAnCD;;AAqCA,eAAeC,SAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport uniqBy from \"lodash/uniqBy\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { movieFragment } from \"../../fragments\";\nimport { Layout } from \"./styled\";\nimport MovieItem from \"../movieItem\";\nimport { makeMovieTitlePageSelector } from \"../../selectors\";\nimport { IState, IMovieData } from \"../../types\";\nimport { setMovieTotalResults } from \"../../actions\";\n\nexport const GET_MOVIES_QUERY = gql`\n  query movies($title: String, $page: Int) {\n    movies(title: $title, page: $page) {\n      Search {\n        ...Movie\n      }\n      totalResults\n      Response\n    }\n  }\n  ${movieFragment.movie}\n`;\n\ninterface IMovieList {\n  defaultMovieTitle?: string;\n  defaultPage?: number;\n}\n\nconst MovieList: React.FC<IMovieList> = ({\n  defaultMovieTitle,\n  defaultPage\n}) => {\n  const dispatch = useDispatch();\n  const movieTitlePageSelector = makeMovieTitlePageSelector();\n  const { title, page } = useSelector((state: IState) =>\n    movieTitlePageSelector(state)\n  );\n  const { loading, error, data } = useQuery(GET_MOVIES_QUERY, {\n    variables: {\n      title: isEmpty(title) ? defaultMovieTitle : title,\n      page: isEmpty(page) ? defaultPage : page\n    }\n  });\n  const movies = get(data, \"movies.Search\", []);\n\n  if (loading || error || isEmpty(movies)) return null;\n\n  // @ts-ignore\n  const duplicateFreeMovies = uniqBy(movies, \"imdbID\") as IMovieData[];\n\n  dispatch(setMovieTotalResults(Number(get(data, \"movies.totalResults\", 0))));\n\n  return (\n    <Layout>\n      {duplicateFreeMovies.map((movie: IMovieData) => (\n        <MovieItem\n          imdbID={get(movie, \"imdbID\", \"\")}\n          title={get(movie, \"Title\", \"\")}\n          year={get(movie, \"Year\", \"\")}\n        />\n      ))}\n    </Layout>\n  );\n};\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}